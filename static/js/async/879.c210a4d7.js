"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["879"],{2442:function(s,a,n){n.r(a),n.d(a,{default:function(){return p}});var l=n(2885);let t=["innerHTML"],p={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"van-doc-markdown-body",innerHTML:'<h1>FieldSinglePicker</h1>\n<div class="van-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>基于 SinglePicker 以及 vant 的 field 组件进行二次封装，方便处理表单中的单项选择需求场景。</p>\n<ul>\n<li>支持传入所有 SinglePicker props（类型 TSinglePickerProps）</li>\n<li>支持传入所有的 <a href="https://vant-ui.github.io/vant/#/zh-CN/field#props" target="_blank">vant field props</a></li>\n</ul>\n<p><strong>主要功能描述</strong></p>\n<ul>\n<li>集成 SinglePicker 所有功能</li>\n</ul>\n<p><strong>对开发者的解脱</strong></p>\n<ul>\n<li>符合 ui 设计</li>\n<li>默认场景下 van-field 绑定值就是展示值，FieldSinglePicker 内部将绑定值与展示值表单真正需要收集的值分隔开。</li>\n</ul>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="van-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FormRef&quot;</span>&gt;</span>\n    modelValue: {{ pickerValue }}\n    <span class="hljs-tag">&lt;<span class="hljs-name">FieldSinglePicker</span>\n      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;pickerValue&quot;</span>\n      <span class="hljs-attr">:field-props</span>=<span class="hljs-string">&quot;{\n        name: &#x27;singlePicker&#x27;,\n        label: &#x27;单选&#x27;,\n        placeholder: &#x27;请选择&#x27;,\n        required: true,\n        rules: [{ required: true, message: &#x27;请选择&#x27; }],\n      }&quot;</span>\n      <span class="hljs-attr">:picker-props</span>=<span class="hljs-string">&quot;{\n        title: &#x27;基础用法&#x27;,\n        columns: columns,\n        columnsFieldNames: columnsFieldNames,\n      }&quot;</span>\n    &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">columns-top</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>这就是基础组件 - SinglePicker<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">FieldSinglePicker</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span>\n      提交\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">import</span> { useWrapperRef } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vhooks&#x27;</span>;\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">FieldSinglePicker</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vant-kit&#x27;</span>;\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Form</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanForm</span>, <span class="hljs-title class_">Button</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanButton</span>, <span class="hljs-title class_">FormInstance</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n  <span class="hljs-keyword">import</span> { ref } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title class_">FormRef</span> = ref&lt;<span class="hljs-title class_">FormInstance</span>&gt;();\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = (<span class="hljs-params"></span>) =&gt; {\n    <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-title function_">validate</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-property">getValues</span>?.());\n    });\n  };\n\n  <span class="hljs-keyword">const</span> columns = [\n    { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;选项1&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;1&#x27;</span> },\n    { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;选项2&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;2&#x27;</span> },\n  ];\n  <span class="hljs-keyword">const</span> columnsFieldNames = {\n    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;name&#x27;</span>,\n    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;value&#x27;</span>,\n  };\n  <span class="hljs-keyword">const</span> [pickerValue, _setPickerValue] = useWrapperRef&lt;string | <span class="hljs-literal">undefined</span>&gt;(\n    <span class="hljs-literal">undefined</span>,\n  );\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css">\n  <span class="hljs-selector-class">.desc</span> {\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n    <span class="hljs-attribute">text-align</span>: center;\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="van-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<p>继承 TSinglePickerProps 的同时</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fieldProps</td>\n<td>当前选中项对应的值</td>\n<td>vant field props</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="events" tabindex="-1">Events</h3>\n<p>继承 SinglePicker</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">事件名</th>\n<th style="text-align:left">说明</th>\n<th style="text-align:left">回调参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">-</td>\n<td style="text-align:left">-</td>\n<td style="text-align:left">-</td>\n</tr>\n</tbody>\n</table>\n</div><div class="van-doc-card"><h3 id="slots" tabindex="-1">Slots</h3>\n<p>继承 SinglePicker</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">名称</th>\n<th style="text-align:left">说明</th>\n<th style="text-align:left">参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">-</td>\n<td style="text-align:left">-</td>\n<td style="text-align:left">-</td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,t))}}}]);