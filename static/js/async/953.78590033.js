"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["953"],{6514:function(s,a,n){n.r(a),n.d(a,{default:function(){return p}});var l=n(2885);let t=["innerHTML"],p={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"van-doc-markdown-body",innerHTML:'<h1>MaskTxt</h1>\n<div class="van-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>脱敏文本组件</p>\n<p><strong>主要功能描述</strong></p>\n<ul>\n<li>自动处理数据源(加密数据)的解密逻辑</li>\n<li>针对不同项目、业务场景，支持自定义：\n<ul>\n<li>加解密方法</li>\n<li>脱敏占位符号</li>\n<li>脱敏展示的策略\n<ul>\n<li>内部已经支持部分策略（身份证、手机号、邮箱、银行卡号），可自由配置。</li>\n<li>也支持完全自定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>针对 ui，支持自定义：\n<ul>\n<li>默认展示的图标大小</li>\n<li>完全自定义展示逻辑</li>\n</ul>\n</li>\n</ul>\n<p><strong>对开发者的解脱</strong></p>\n<ul>\n<li>默认的 ui、交互处理</li>\n<li>当数据源不符合与后端约定的格式，组件内部兜底加解密的展示。</li>\n</ul>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="van-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<p>必要配置项：</p>\n<ul>\n<li>preset 预设，一般在一个项目中是通用的\n<ul>\n<li>encrypt 加密方法</li>\n<li>decrypt 解密方法</li>\n<li>fetchPlaintext 获取未脱敏数据的异步方法</li>\n</ul>\n</li>\n<li>maskId 数据标识</li>\n<li>mask-txt 数据源(加密且脱敏)</li>\n</ul>\n<blockquote>\n<p>内部兜底逻辑：</p>\n<ul>\n<li>如果数据源符合要求（加密且脱敏 - 根据是否包含脱敏占位符号来判断），则走调用接口的逻辑。</li>\n<li>反之，不符合要求，走前端兜底策略</li>\n<li>例如再右侧示例中输入 12345678 和 123*_678 的展示效果是一致的，只不过当数据源本身包含脱敏占位符(默认为 _)时，点击小眼睛会走调用接口逻辑，界面可以观察到 loading 效果。</li>\n</ul>\n</blockquote>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">demo-block</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;基础用法&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>设置初始值: 加密且脱敏<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;明文&quot;</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourcePlainTxt&quot;</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n        <span class="hljs-attr">disabled</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;密文&quot;</span>\n        <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourceCipherTxt&quot;</span>\n        <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入明文, 制造密文&quot;</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mask-txt</span>\n        <span class="hljs-attr">:preset</span>=<span class="hljs-string">&quot;commonPreset&quot;</span>\n        <span class="hljs-attr">mask-id</span>=<span class="hljs-string">&quot;maskId&quot;</span>\n        <span class="hljs-attr">:mask-txt</span>=<span class="hljs-string">&quot;dataSourceCipherTxt&quot;</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">demo-block</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">MaskTxt</span>, <span class="hljs-title class_">TMaskTxtProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vant-kit&#x27;</span>;\n  <span class="hljs-keyword">import</span> { useWrapperRef } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vhooks&#x27;</span>;\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">Field</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanField</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n  <span class="hljs-keyword">import</span> { getAesCryptoTool } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/utils&#x27;</span>;\n  <span class="hljs-keyword">import</span> { computed } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n  <span class="hljs-keyword">const</span> { AES_Encrypt, AES_Dencrypt } = <span class="hljs-title function_">getAesCryptoTool</span>({\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;12345678&#x27;</span>,\n  });\n\n  <span class="hljs-comment">/**\n   * 制造数据源\n   */</span>\n  <span class="hljs-keyword">const</span> [dataSourcePlainTxt] = <span class="hljs-title function_">useWrapperRef</span>(<span class="hljs-string">&#x27;&#x27;</span>);\n  <span class="hljs-keyword">const</span> dataSourceCipherTxt = <span class="hljs-title function_">computed</span>(\n    <span class="hljs-function">() =&gt;</span> commonPreset.<span class="hljs-property">encrypt</span>?.(dataSourcePlainTxt.<span class="hljs-property">value</span>) <span class="hljs-keyword">as</span> string,\n  );\n\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">commonPreset</span>: <span class="hljs-title class_">TMaskTxtProps</span>[<span class="hljs-string">&#x27;preset&#x27;</span>] = {\n    <span class="hljs-attr">decrypt</span>: AES_Dencrypt,\n    <span class="hljs-attr">encrypt</span>: AES_Encrypt,\n    <span class="hljs-attr">fetchPlaintext</span>: <span class="hljs-title function_">async</span> (_maskId) =&gt; {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;string&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;模拟接口调用&#x27;</span>);\n          <span class="hljs-title function_">resolve</span>(dataSourceCipherTxt.<span class="hljs-property">value</span>!);\n        }, <span class="hljs-number">1000</span>);\n      });\n    },\n  };\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css">\n  <span class="hljs-selector-tag">section</span> {\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">16px</span>;\n    <span class="hljs-attribute">display</span>: flex;\n    <span class="hljs-attribute">flex-direction</span>: column;\n    <span class="hljs-attribute">justify-content</span>: center;\n    <span class="hljs-attribute">align-items</span>: center;\n    <span class="hljs-attribute">gap</span>: <span class="hljs-number">12px</span>;\n\n    <span class="hljs-selector-class">.desc</span> {\n      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n      <span class="hljs-attribute">align-self</span>: flex-start;\n      <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n</div><div class="van-doc-card"><h3 id="zi-ding-yi-tuo-min-zhan-wei-fu-hao" tabindex="-1">自定义脱敏占位符号</h3>\n<p>preset.placeholder</p>\n<pre><code class="language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">commonPreset</span>: <span class="hljs-title class_">TMaskTxtProps</span>[<span class="hljs-string">&#x27;preset&#x27;</span>] = {\n  ……\n  <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;$&#x27;</span>\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="zi-dai-yi-xie-nei-zhi-tuo-min-ce-lue" tabindex="-1">自带一些内置脱敏策略</h3>\n<p>preset.maskType</p>\n<p><code>TMaskTxtProps[\'preset\'][\'maskType\']</code></p>\n</div><div class="van-doc-card"><h3 id="zi-ding-yi-tuo-min-ce-lue" tabindex="-1">自定义脱敏策略</h3>\n<p>preset.maskStrategy</p>\n<p><code>TMaskTxtProps[\'preset\'][\'maskStrategy\']</code></p>\n<pre><code class="language-ts"><span class="hljs-keyword">const</span> <span class="hljs-attr">commonPreset</span>: <span class="hljs-title class_">TMaskTxtProps</span>[<span class="hljs-string">&#x27;preset&#x27;</span>] = {\n  ……\n  <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;\uD83D\uDE00&#x27;</span>,\n  <span class="hljs-title function_">maskStrategy</span>(<span class="hljs-params">str</span>) {\n    <span class="hljs-keyword">try</span> {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">`\uD83D\uDC49<span class="hljs-subst">${str.replace(/./g, <span class="hljs-string">&#x27;\uD83D\uDE00&#x27;</span>)}</span>\uD83D\uDC48`</span>;\n    } <span class="hljs-keyword">catch</span> (_) {\n      _;\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;\n    }\n  },\n};\n</code></pre>\n</div><div class="van-doc-card"><h3 id="geng-gai-mo-ren-zhan-shi-de-tu-biao-da-xiao" tabindex="-1">更改默认展示的图标大小</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mask-txt</span> …… <span class="hljs-attr">icon-size</span>=<span class="hljs-string">&quot;30&quot;</span> /&gt;</span>\n</code></pre>\n</div><div class="van-doc-card"><h3 id="wan-quan-zi-ding-yi-zhan-shi-luo-ji" tabindex="-1">完全自定义展示逻辑</h3>\n<ul>\n<li>插槽支持暴露完善的 api</li>\n</ul>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">mask-txt</span>\n  <span class="hljs-attr">:preset</span>=<span class="hljs-string">&quot;commonPreset&quot;</span>\n  <span class="hljs-attr">mask-id</span>=<span class="hljs-string">&quot;maskId&quot;</span>\n  <span class="hljs-attr">:mask-txt</span>=<span class="hljs-string">&quot;dataSourceCipherTxt&quot;</span>\n&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>\n    #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;{\n        showValue,\n        loading,\n        isPlaintextVisible,\n        toggleVisibility,\n      }&quot;</span>\n  &gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggleVisibility&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>{{ showValue }}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-icon</span>\n        <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!loading&quot;</span>\n        <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;16&quot;</span>\n        <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;isPlaintextVisible ? &#x27;eye&#x27; : &#x27;browsing-history&#x27;&quot;</span>\n      /&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-loading</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">:size</span>=<span class="hljs-string">&quot;16&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;spinner&quot;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mask-txt</span>&gt;</span>\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="van-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<p><code>TMaskTxtProps</code></p>\n<p>| 参数     | 说明                                | 类型                                   | 默认值       |\n| -------- | ----------------------------------- | -------------------------------------- | ------------ | ---------------- | --- |\n| maskId   | 数据标识,来源于后端，也需传递给后端 | string                                 | -            |\n| maskTxt  | 数据源（默认期望加密且脱敏）        | string                                 | -            |\n| iconSize | 默认所展示的图标大小                | string | number                       | 16           |\n| preset   | 一些预设                            | <code>Omit&lt;IUseMaskedFieldOptions, \'maskId\' | \'modelValue\' | \'onValueUpdate\'</code> | -   |</p>\n<pre><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUseMaskedFieldOptions</span> {\n  <span class="hljs-attr">modelValue</span>: <span class="hljs-title class_">ComputedRef</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">maskId</span>: <span class="hljs-title class_">ComputedRef</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">fetchPlaintext</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">maskId</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">decrypt</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">cipher</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">encrypt</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">plain</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">placeholder</span>?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-comment">/**\n   * 自定义脱敏函数（最高优先级）\n   * 若提供，则忽略 maskType 和 placeholder\n   */</span>\n  <span class="hljs-attr">maskStrategy</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-comment">/**\n   * 使用内置脱敏策略（中优先级）\n   * 若未提供 maskStrategy，则使用此策略\n   */</span>\n  <span class="hljs-attr">maskType</span>?: <span class="hljs-title class_">TMaskType</span>;\n  <span class="hljs-attr">onValueUpdate</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;\n}\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">TMaskType</span> = <span class="hljs-string">&#x27;id&#x27;</span> | <span class="hljs-string">&#x27;phone&#x27;</span> | <span class="hljs-string">&#x27;bankCard&#x27;</span> | <span class="hljs-string">&#x27;email&#x27;</span>;\n</code></pre>\n</div><div class="van-doc-card"><h3 id="slots" tabindex="-1">slots</h3>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">名称</th>\n<th style="text-align:left">说明</th>\n<th style="text-align:left">参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">default</td>\n<td style="text-align:left">控制组件的展示效果</td>\n<td style="text-align:left"><code>{ show-value, loading, is-plaintext-visible, toggle-visibility}</code></td>\n</tr>\n</tbody>\n</table>\n</div>'},null,8,t))}}}]);