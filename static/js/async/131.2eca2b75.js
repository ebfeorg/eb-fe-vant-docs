"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["131"],{5665:function(s,a,n){n.r(a),n.d(a,{default:function(){return p}});var l=n(2885);let t=["innerHTML"],p={setup:()=>({html:""}),render:()=>((0,l.wg)(),(0,l.iD)("div",{class:"van-doc-markdown-body",innerHTML:'<h1>FieldMaskTxt</h1>\n<div class="van-doc-card"><h3 id="jie-shao" tabindex="-1">介绍</h3>\n<p>将脱敏逻辑嵌入表单组件中，将开发者从脱敏相关的具体实现逻辑中解脱出来。</p>\n<ul>\n<li>包含数据回显、编辑、兜底处理</li>\n<li>如果存在上下步表单，基于后端的数据源(加密且脱敏)进行编辑后，再最后一步进行预览时，数据已经变成用户最新输入的(加密未脱敏)数据，此时组件会自行进行脱敏。点击小眼睛也可正常转化未脱敏状态。\n<ul>\n<li>这种情况其实已经被‘兜底处理’包含了，只要数据源不符合约定的(加密且脱敏)逻辑，前端尽力兜底</li>\n</ul>\n</li>\n</ul>\n<p><strong>主要功能描述</strong></p>\n<ul>\n<li>脱敏逻辑嵌入表单组件\n<ul>\n<li>自动处理数据源(加密数据)的解密逻辑</li>\n<li>表单展示值与真正需要收集的值自动分隔开</li>\n</ul>\n</li>\n<li>针对不同项目、业务场景，支持自定义：\n<ul>\n<li>加解密方法</li>\n<li>脱敏占位符号</li>\n<li>脱敏展示的策略\n<ul>\n<li>内部已经支持部分策略（身份证、手机号、邮箱、银行卡号），可自由配置。</li>\n<li>也支持完全自定义</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持根据脱敏状态，定制不同的表单验证规则</li>\n<li>支持对真实收集值的 field 组件定制 props</li>\n</ul>\n</div><h2 id="dai-ma-yan-shi" tabindex="-1">代码演示</h2>\n<div class="van-doc-card"><h3 id="ji-chu-yong-fa" tabindex="-1">基础用法</h3>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">demo-block</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;基础用法&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FormRef&quot;</span> <span class="hljs-attr">:validate-trigger</span>=<span class="hljs-string">&quot;[&#x27;onBlur&#x27;, &#x27;onChange&#x27;]&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>设置初始值: 加密且脱敏<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;明文&quot;</span>\n          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourcePlainTxt&quot;</span>\n        /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n          <span class="hljs-attr">disabled</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;密文&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourceCipherTxt&quot;</span>\n          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入明文, 制造密文&quot;</span>\n        /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>modelValue:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        {{ filedValue }}\n        <span class="hljs-tag">&lt;<span class="hljs-name">FieldMaskTxt</span>\n          <span class="hljs-attr">:preset</span>=<span class="hljs-string">&quot;commonPreset&quot;</span>\n          <span class="hljs-attr">mask-id</span>=<span class="hljs-string">&quot;maskId&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filedValue&quot;</span>\n          <span class="hljs-attr">:field-props</span>=<span class="hljs-string">&quot;{\n            name: &#x27;testField&#x27;,\n            label: &#x27;测试字段&#x27;,\n            required: true,\n            rules: [{ required: true, message: &#x27;请输入&#x27; }],\n          }&quot;</span>\n        /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span>\n        提交\n      <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">demo-block</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">FieldMaskTxt</span>, <span class="hljs-title class_">TMaskTxtProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vant-kit&#x27;</span>;\n  <span class="hljs-keyword">import</span> { useWrapperRef } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vhooks&#x27;</span>;\n  <span class="hljs-keyword">import</span> {\n    <span class="hljs-title class_">Form</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanForm</span>,\n    <span class="hljs-title class_">Field</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanField</span>,\n    <span class="hljs-title class_">Button</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanButton</span>,\n    <span class="hljs-title class_">FormInstance</span>,\n  } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n  <span class="hljs-keyword">import</span> { getAesCryptoTool } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/utils&#x27;</span>;\n  <span class="hljs-keyword">import</span> { computed, ref, watch } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n  <span class="hljs-keyword">const</span> { AES_Encrypt, AES_Dencrypt } = <span class="hljs-title function_">getAesCryptoTool</span>({\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;12345678&#x27;</span>,\n  });\n\n  <span class="hljs-comment">/**\n   * 制造数据源\n   */</span>\n  <span class="hljs-keyword">const</span> [dataSourcePlainTxt] = <span class="hljs-title function_">useWrapperRef</span>(<span class="hljs-string">&#x27;12345678&#x27;</span>);\n  <span class="hljs-keyword">const</span> dataSourceCipherTxt = <span class="hljs-title function_">computed</span>(\n    <span class="hljs-function">() =&gt;</span> commonPreset.<span class="hljs-property">encrypt</span>?.(dataSourcePlainTxt.<span class="hljs-property">value</span>) <span class="hljs-keyword">as</span> string,\n  );\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">commonPreset</span>: <span class="hljs-title class_">TMaskTxtProps</span>[<span class="hljs-string">&#x27;preset&#x27;</span>] = {\n    <span class="hljs-attr">decrypt</span>: AES_Dencrypt,\n    <span class="hljs-attr">encrypt</span>: AES_Encrypt,\n    <span class="hljs-attr">fetchPlaintext</span>: <span class="hljs-title function_">async</span> (_maskId) =&gt; {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;string&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;模拟接口调用&#x27;</span>);\n          <span class="hljs-title function_">resolve</span>(dataSourceCipherTxt.<span class="hljs-property">value</span>!);\n        }, <span class="hljs-number">1000</span>);\n      });\n    },\n  };\n\n  <span class="hljs-comment">/**\n   * 表单逻辑\n   */</span>\n  <span class="hljs-keyword">const</span> [filedValue, setFiledValue] = <span class="hljs-title function_">useWrapperRef</span>(dataSourceCipherTxt.<span class="hljs-property">value</span>);\n  <span class="hljs-title function_">watch</span>(dataSourceCipherTxt, setFiledValue);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title class_">FormRef</span> = ref&lt;<span class="hljs-title class_">FormInstance</span>&gt;();\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = (<span class="hljs-params"></span>) =&gt; {\n    <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-title function_">validate</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getValues&#x27;</span>, <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-property">getValues</span>?.());\n    });\n  };\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css">\n  <span class="hljs-selector-tag">section</span> {\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">16px</span>;\n    <span class="hljs-attribute">display</span>: flex;\n    <span class="hljs-attribute">flex-direction</span>: column;\n    <span class="hljs-attribute">justify-content</span>: center;\n    <span class="hljs-attribute">align-items</span>: center;\n    <span class="hljs-attribute">gap</span>: <span class="hljs-number">12px</span>;\n\n    <span class="hljs-selector-class">.desc</span> {\n      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n      <span class="hljs-attribute">align-self</span>: flex-start;\n      <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n</div><div class="van-doc-card"><h3 id="gen-ju-tuo-min-zhuang-tai-ding-zhi-rules" tabindex="-1">根据脱敏状态定制 rules</h3>\n<p>props.genFieldRules</p>\n<blockquote>\n<p>初始状态(脱敏)</p>\n<ul>\n<li>数据被脱敏，不知道数据源真正是什么样子的，因此不需要验证</li>\n</ul>\n<p>编辑状态(未脱敏)</p>\n<ul>\n<li>genFieldRules 生成的 rules，默认会分别传入用于展示、用于收集数据的 filed 组件中。</li>\n<li>用于收集数据的 filed 组件，值是加密后的，不能通过校验，因此可以配置 real-field-props 控制真实收集数据的 filed 组件 props</li>\n</ul>\n</blockquote>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">demo-block</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;根据脱敏状态定制 rules&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">van-form</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FormRef&quot;</span> <span class="hljs-attr">:validate-trigger</span>=<span class="hljs-string">&quot;[&#x27;onBlur&#x27;, &#x27;onChange&#x27;]&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span>设置初始值: 加密且脱敏<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;明文&quot;</span>\n          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourcePlainTxt&quot;</span>\n        /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">van-field</span>\n          <span class="hljs-attr">disabled</span>\n          <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;密文&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;dataSourceCipherTxt&quot;</span>\n          <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;输入明文, 制造密文&quot;</span>\n        /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>modelValue:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n        {{ filedValue }}\n        <span class="hljs-tag">&lt;<span class="hljs-name">FieldMaskTxt</span>\n          <span class="hljs-attr">:preset</span>=<span class="hljs-string">&quot;commonPreset&quot;</span>\n          <span class="hljs-attr">mask-id</span>=<span class="hljs-string">&quot;maskId&quot;</span>\n          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;filedValue&quot;</span>\n          <span class="hljs-attr">:field-props</span>=<span class="hljs-string">&quot;{\n            name: &#x27;testField&#x27;,\n            label: &#x27;测试字段&#x27;,\n            required: true,\n            rules: [{ required: true }],\n          }&quot;</span>\n          <span class="hljs-attr">:gen-field-rules</span>=<span class="hljs-string">&quot;genFieldRules&quot;</span>\n          <span class="hljs-attr">:real-field-props</span>=<span class="hljs-string">&quot;{\n            rules: [],\n          }&quot;</span>\n        /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">round</span> <span class="hljs-attr">block</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleSubmit&quot;</span>&gt;</span>\n        提交\n      <span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">van-form</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">demo-block</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript">\n  <span class="hljs-keyword">import</span> { <span class="hljs-title class_">FieldMaskTxt</span>, <span class="hljs-title class_">TMaskTxtProps</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vant-kit&#x27;</span>;\n  <span class="hljs-keyword">import</span> { useWrapperRef } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/vhooks&#x27;</span>;\n  <span class="hljs-keyword">import</span> {\n    <span class="hljs-title class_">Form</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanForm</span>,\n    <span class="hljs-title class_">Field</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanField</span>,\n    <span class="hljs-title class_">Button</span> <span class="hljs-keyword">as</span> <span class="hljs-title class_">VanButton</span>,\n    <span class="hljs-title class_">FormInstance</span>,\n  } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;\n  <span class="hljs-keyword">import</span> { getAesCryptoTool, <span class="hljs-title class_">IdRule</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ebfe/utils&#x27;</span>;\n  <span class="hljs-keyword">import</span> { computed, ref, watch } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;\n\n  <span class="hljs-keyword">const</span> { AES_Encrypt, AES_Dencrypt } = <span class="hljs-title function_">getAesCryptoTool</span>({\n    <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;12345678&#x27;</span>,\n  });\n\n  <span class="hljs-comment">/**\n   * 制造数据源\n   */</span>\n  <span class="hljs-keyword">const</span> [dataSourcePlainTxt] = <span class="hljs-title function_">useWrapperRef</span>(<span class="hljs-string">&#x27;130999199909099999&#x27;</span>);\n  <span class="hljs-keyword">const</span> dataSourceCipherTxt = <span class="hljs-title function_">computed</span>(\n    <span class="hljs-function">() =&gt;</span> commonPreset.<span class="hljs-property">encrypt</span>?.(dataSourcePlainTxt.<span class="hljs-property">value</span>) <span class="hljs-keyword">as</span> string,\n  );\n  <span class="hljs-keyword">const</span> <span class="hljs-attr">commonPreset</span>: <span class="hljs-title class_">TMaskTxtProps</span>[<span class="hljs-string">&#x27;preset&#x27;</span>] = {\n    <span class="hljs-attr">decrypt</span>: AES_Dencrypt,\n    <span class="hljs-attr">encrypt</span>: AES_Encrypt,\n    <span class="hljs-attr">maskType</span>: <span class="hljs-string">&#x27;id&#x27;</span>,\n    <span class="hljs-attr">fetchPlaintext</span>: <span class="hljs-title function_">async</span> (_maskId) =&gt; {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>&lt;string&gt;(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> {\n        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {\n          <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;模拟接口调用&#x27;</span>);\n          <span class="hljs-title function_">resolve</span>(dataSourceCipherTxt.<span class="hljs-property">value</span>!);\n        }, <span class="hljs-number">1000</span>);\n      });\n    },\n  };\n\n  <span class="hljs-comment">/**\n   * 表单逻辑\n   */</span>\n  <span class="hljs-keyword">const</span> [filedValue, setFiledValue] = <span class="hljs-title function_">useWrapperRef</span>(dataSourceCipherTxt.<span class="hljs-property">value</span>);\n  <span class="hljs-title function_">watch</span>(dataSourceCipherTxt, setFiledValue);\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">genFieldRules</span> = (<span class="hljs-params">{ isPlaintextVisible }</span>) =&gt; {\n    <span class="hljs-keyword">return</span> [\n      {\n        <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-attr">message</span>: isPlaintextVisible &amp;&amp; <span class="hljs-title class_">IdRule</span>?.<span class="hljs-property">message</span>,\n        <span class="hljs-attr">validator</span>:\n          isPlaintextVisible &amp;&amp;\n          (<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {\n            <span class="hljs-keyword">return</span> <span class="hljs-title class_">IdRule</span>.<span class="hljs-property">pattern</span>.<span class="hljs-title function_">test</span>(value);\n          }),\n      },\n    ];\n  };\n\n  <span class="hljs-keyword">const</span> <span class="hljs-title class_">FormRef</span> = ref&lt;<span class="hljs-title class_">FormInstance</span>&gt;();\n  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSubmit</span> = (<span class="hljs-params"></span>) =&gt; {\n    <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-title function_">validate</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-comment">// eslint-disable-next-line no-console</span>\n      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getValues&#x27;</span>, <span class="hljs-title class_">FormRef</span>.<span class="hljs-property">value</span>?.<span class="hljs-property">getValues</span>?.());\n    });\n  };\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span>&gt;</span><span class="language-css">\n  <span class="hljs-selector-tag">section</span> {\n    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">16px</span>;\n    <span class="hljs-attribute">display</span>: flex;\n    <span class="hljs-attribute">flex-direction</span>: column;\n    <span class="hljs-attribute">justify-content</span>: center;\n    <span class="hljs-attribute">align-items</span>: center;\n    <span class="hljs-attribute">gap</span>: <span class="hljs-number">12px</span>;\n\n    <span class="hljs-selector-class">.desc</span> {\n      <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;\n      <span class="hljs-attribute">align-self</span>: flex-start;\n      <span class="hljs-attribute">color</span>: <span class="hljs-number">#aaa</span>;\n    }\n  }\n</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n</code></pre>\n</div><h2 id="api" tabindex="-1">API</h2>\n<div class="van-doc-card"><h3 id="props" tabindex="-1">Props</h3>\n<pre><code>TFieldMaskTxtProps\n</code></pre>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">参数</th>\n<th style="text-align:left">说明</th>\n<th style="text-align:left">类型</th>\n<th style="text-align:left">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">preset</td>\n<td style="text-align:left">一些预设</td>\n<td style="text-align:left"><code>Omit&lt;IUseMaskedFieldOptions, \'maskId\'</code></td>\n<td style="text-align:left">-</td>\n</tr>\n<tr>\n<td style="text-align:left">maskId</td>\n<td style="text-align:left">数据标识,来源于后端，也需传递给后端</td>\n<td style="text-align:left">string</td>\n<td style="text-align:left">-</td>\n</tr>\n<tr>\n<td style="text-align:left">modelValue</td>\n<td style="text-align:left">表单真实收集的值</td>\n<td style="text-align:left">string</td>\n<td style="text-align:left">-</td>\n</tr>\n<tr>\n<td style="text-align:left">fieldProps</td>\n<td style="text-align:left">用于展示、真实收集值的表单组件公用 props</td>\n<td style="text-align:left"><code>Partial&lt;Omit&lt;FieldProps, \'modelValue\'&gt;&gt;</code></td>\n<td style="text-align:left">-</td>\n</tr>\n<tr>\n<td style="text-align:left">genFieldRules</td>\n<td style="text-align:left">根据脱敏状态生成表单验证规则</td>\n<td style="text-align:left"><code>(p: { isPlaintextVisible: boolean }) =&gt; FieldProps[\'rules\']</code></td>\n<td style="text-align:left">-</td>\n</tr>\n<tr>\n<td style="text-align:left">realFieldProps</td>\n<td style="text-align:left">用于真实收集值的表单组件 props</td>\n<td style="text-align:left"><code>Partial&lt;Omit&lt;FieldProps, \'modelValue\'&gt;&gt;</code></td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td style="text-align:left">loading</td>\n<td style="text-align:left">用于只读、回显数据场景下的异步 loading</td>\n<td style="text-align:left">boolean</td>\n<td style="text-align:left">false</td>\n</tr>\n</tbody>\n</table>\n<pre><code class="language-ts"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUseMaskedFieldOptions</span> {\n  <span class="hljs-attr">modelValue</span>: <span class="hljs-title class_">ComputedRef</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">maskId</span>: <span class="hljs-title class_">ComputedRef</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">fetchPlaintext</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">maskId</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">string</span>&gt;;\n  <span class="hljs-attr">decrypt</span>: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">cipher</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">encrypt</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">plain</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-attr">placeholder</span>?: <span class="hljs-built_in">string</span>;\n  <span class="hljs-comment">/**\n   * 自定义脱敏函数（最高优先级）\n   * 若提供，则忽略 maskType 和 placeholder\n   */</span>\n  <span class="hljs-attr">maskStrategy</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">string</span>;\n  <span class="hljs-comment">/**\n   * 使用内置脱敏策略（中优先级）\n   * 若未提供 maskStrategy，则使用此策略\n   */</span>\n  <span class="hljs-attr">maskType</span>?: <span class="hljs-title class_">TMaskType</span>;\n  <span class="hljs-attr">onValueUpdate</span>?: <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">value</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> <span class="hljs-built_in">void</span>;\n}\n\n<span class="hljs-keyword">type</span> <span class="hljs-title class_">TMaskType</span> = <span class="hljs-string">&#x27;id&#x27;</span> | <span class="hljs-string">&#x27;phone&#x27;</span> | <span class="hljs-string">&#x27;bankCard&#x27;</span> | <span class="hljs-string">&#x27;email&#x27;</span>;\n</code></pre>\n</div>'},null,8,t))}}}]);